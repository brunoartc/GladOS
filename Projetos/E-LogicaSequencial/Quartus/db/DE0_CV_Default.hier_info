|Ram8
clock => Register16:P0.clock
input[0] => Register16:P0.input[0]
input[1] => Register16:P0.input[1]
input[2] => Register16:P0.input[2]
input[3] => Register16:P0.input[3]
input[4] => Register16:P0.input[4]
input[5] => Register16:P0.input[5]
input[6] => Register16:P0.input[6]
input[7] => Register16:P0.input[7]
input[8] => Register16:P0.input[8]
input[9] => Register16:P0.input[9]
input[10] => Register16:P0.input[10]
input[11] => Register16:P0.input[11]
input[12] => Register16:P0.input[12]
input[13] => Register16:P0.input[13]
input[14] => Register16:P0.input[14]
input[15] => Register16:P0.input[15]
load => Register16:P0.load
address[0] => ~NO_FANOUT~
address[1] => ~NO_FANOUT~
address[2] => ~NO_FANOUT~
output[0] << Register16:P0.output[0]
output[1] << Register16:P0.output[1]
output[2] << Register16:P0.output[2]
output[3] << Register16:P0.output[3]
output[4] << Register16:P0.output[4]
output[5] << Register16:P0.output[5]
output[6] << Register16:P0.output[6]
output[7] << Register16:P0.output[7]
output[8] << Register16:P0.output[8]
output[9] << Register16:P0.output[9]
output[10] << Register16:P0.output[10]
output[11] << Register16:P0.output[11]
output[12] << Register16:P0.output[12]
output[13] << Register16:P0.output[13]
output[14] << Register16:P0.output[14]
output[15] << Register16:P0.output[15]


|Ram8|Register16:P0
clock => Register8:P0.clock
clock => Register8:P1.clock
input[0] => Register8:P0.input[0]
input[1] => Register8:P0.input[1]
input[2] => Register8:P0.input[2]
input[3] => Register8:P0.input[3]
input[4] => Register8:P0.input[4]
input[5] => Register8:P0.input[5]
input[6] => Register8:P0.input[6]
input[7] => Register8:P0.input[7]
input[8] => Register8:P1.input[0]
input[9] => Register8:P1.input[1]
input[10] => Register8:P1.input[2]
input[11] => Register8:P1.input[3]
input[12] => Register8:P1.input[4]
input[13] => Register8:P1.input[5]
input[14] => Register8:P1.input[6]
input[15] => Register8:P1.input[7]
load => Register8:P0.load
load => Register8:P1.load
output[0] <= Register8:P0.output[0]
output[1] <= Register8:P0.output[1]
output[2] <= Register8:P0.output[2]
output[3] <= Register8:P0.output[3]
output[4] <= Register8:P0.output[4]
output[5] <= Register8:P0.output[5]
output[6] <= Register8:P0.output[6]
output[7] <= Register8:P0.output[7]
output[8] <= Register8:P1.output[0]
output[9] <= Register8:P1.output[1]
output[10] <= Register8:P1.output[2]
output[11] <= Register8:P1.output[3]
output[12] <= Register8:P1.output[4]
output[13] <= Register8:P1.output[5]
output[14] <= Register8:P1.output[6]
output[15] <= Register8:P1.output[7]


|Ram8|Register16:P0|Register8:P0
clock => BinaryDigit:P0.clock
clock => BinaryDigit:P1.clock
clock => BinaryDigit:P2.clock
clock => BinaryDigit:P3.clock
clock => BinaryDigit:P4.clock
clock => BinaryDigit:P5.clock
clock => BinaryDigit:P6.clock
clock => BinaryDigit:P7.clock
input[0] => BinaryDigit:P0.input
input[1] => BinaryDigit:P1.input
input[2] => BinaryDigit:P2.input
input[3] => BinaryDigit:P3.input
input[4] => BinaryDigit:P4.input
input[5] => BinaryDigit:P5.input
input[6] => BinaryDigit:P6.input
input[7] => BinaryDigit:P7.input
load => BinaryDigit:P0.load
load => BinaryDigit:P1.load
load => BinaryDigit:P2.load
load => BinaryDigit:P3.load
load => BinaryDigit:P4.load
load => BinaryDigit:P5.load
load => BinaryDigit:P6.load
load => BinaryDigit:P7.load
output[0] <= BinaryDigit:P0.output
output[1] <= BinaryDigit:P1.output
output[2] <= BinaryDigit:P2.output
output[3] <= BinaryDigit:P3.output
output[4] <= BinaryDigit:P4.output
output[5] <= BinaryDigit:P5.output
output[6] <= BinaryDigit:P6.output
output[7] <= BinaryDigit:P7.output


|Ram8|Register16:P0|Register8:P0|BinaryDigit:P0
clock => FlipFlopD:P2.clock
input => Mux2Way:P1.b
load => Mux2Way:P1.sel
output <= FlipFlopD:P2.q


|Ram8|Register16:P0|Register8:P0|BinaryDigit:P0|Mux2Way:P1
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram8|Register16:P0|Register8:P0|BinaryDigit:P0|FlipFlopD:P2
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram8|Register16:P0|Register8:P0|BinaryDigit:P1
clock => FlipFlopD:P2.clock
input => Mux2Way:P1.b
load => Mux2Way:P1.sel
output <= FlipFlopD:P2.q


|Ram8|Register16:P0|Register8:P0|BinaryDigit:P1|Mux2Way:P1
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram8|Register16:P0|Register8:P0|BinaryDigit:P1|FlipFlopD:P2
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram8|Register16:P0|Register8:P0|BinaryDigit:P2
clock => FlipFlopD:P2.clock
input => Mux2Way:P1.b
load => Mux2Way:P1.sel
output <= FlipFlopD:P2.q


|Ram8|Register16:P0|Register8:P0|BinaryDigit:P2|Mux2Way:P1
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram8|Register16:P0|Register8:P0|BinaryDigit:P2|FlipFlopD:P2
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram8|Register16:P0|Register8:P0|BinaryDigit:P3
clock => FlipFlopD:P2.clock
input => Mux2Way:P1.b
load => Mux2Way:P1.sel
output <= FlipFlopD:P2.q


|Ram8|Register16:P0|Register8:P0|BinaryDigit:P3|Mux2Way:P1
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram8|Register16:P0|Register8:P0|BinaryDigit:P3|FlipFlopD:P2
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram8|Register16:P0|Register8:P0|BinaryDigit:P4
clock => FlipFlopD:P2.clock
input => Mux2Way:P1.b
load => Mux2Way:P1.sel
output <= FlipFlopD:P2.q


|Ram8|Register16:P0|Register8:P0|BinaryDigit:P4|Mux2Way:P1
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram8|Register16:P0|Register8:P0|BinaryDigit:P4|FlipFlopD:P2
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram8|Register16:P0|Register8:P0|BinaryDigit:P5
clock => FlipFlopD:P2.clock
input => Mux2Way:P1.b
load => Mux2Way:P1.sel
output <= FlipFlopD:P2.q


|Ram8|Register16:P0|Register8:P0|BinaryDigit:P5|Mux2Way:P1
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram8|Register16:P0|Register8:P0|BinaryDigit:P5|FlipFlopD:P2
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram8|Register16:P0|Register8:P0|BinaryDigit:P6
clock => FlipFlopD:P2.clock
input => Mux2Way:P1.b
load => Mux2Way:P1.sel
output <= FlipFlopD:P2.q


|Ram8|Register16:P0|Register8:P0|BinaryDigit:P6|Mux2Way:P1
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram8|Register16:P0|Register8:P0|BinaryDigit:P6|FlipFlopD:P2
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram8|Register16:P0|Register8:P0|BinaryDigit:P7
clock => FlipFlopD:P2.clock
input => Mux2Way:P1.b
load => Mux2Way:P1.sel
output <= FlipFlopD:P2.q


|Ram8|Register16:P0|Register8:P0|BinaryDigit:P7|Mux2Way:P1
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram8|Register16:P0|Register8:P0|BinaryDigit:P7|FlipFlopD:P2
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram8|Register16:P0|Register8:P1
clock => BinaryDigit:P0.clock
clock => BinaryDigit:P1.clock
clock => BinaryDigit:P2.clock
clock => BinaryDigit:P3.clock
clock => BinaryDigit:P4.clock
clock => BinaryDigit:P5.clock
clock => BinaryDigit:P6.clock
clock => BinaryDigit:P7.clock
input[0] => BinaryDigit:P0.input
input[1] => BinaryDigit:P1.input
input[2] => BinaryDigit:P2.input
input[3] => BinaryDigit:P3.input
input[4] => BinaryDigit:P4.input
input[5] => BinaryDigit:P5.input
input[6] => BinaryDigit:P6.input
input[7] => BinaryDigit:P7.input
load => BinaryDigit:P0.load
load => BinaryDigit:P1.load
load => BinaryDigit:P2.load
load => BinaryDigit:P3.load
load => BinaryDigit:P4.load
load => BinaryDigit:P5.load
load => BinaryDigit:P6.load
load => BinaryDigit:P7.load
output[0] <= BinaryDigit:P0.output
output[1] <= BinaryDigit:P1.output
output[2] <= BinaryDigit:P2.output
output[3] <= BinaryDigit:P3.output
output[4] <= BinaryDigit:P4.output
output[5] <= BinaryDigit:P5.output
output[6] <= BinaryDigit:P6.output
output[7] <= BinaryDigit:P7.output


|Ram8|Register16:P0|Register8:P1|BinaryDigit:P0
clock => FlipFlopD:P2.clock
input => Mux2Way:P1.b
load => Mux2Way:P1.sel
output <= FlipFlopD:P2.q


|Ram8|Register16:P0|Register8:P1|BinaryDigit:P0|Mux2Way:P1
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram8|Register16:P0|Register8:P1|BinaryDigit:P0|FlipFlopD:P2
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram8|Register16:P0|Register8:P1|BinaryDigit:P1
clock => FlipFlopD:P2.clock
input => Mux2Way:P1.b
load => Mux2Way:P1.sel
output <= FlipFlopD:P2.q


|Ram8|Register16:P0|Register8:P1|BinaryDigit:P1|Mux2Way:P1
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram8|Register16:P0|Register8:P1|BinaryDigit:P1|FlipFlopD:P2
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram8|Register16:P0|Register8:P1|BinaryDigit:P2
clock => FlipFlopD:P2.clock
input => Mux2Way:P1.b
load => Mux2Way:P1.sel
output <= FlipFlopD:P2.q


|Ram8|Register16:P0|Register8:P1|BinaryDigit:P2|Mux2Way:P1
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram8|Register16:P0|Register8:P1|BinaryDigit:P2|FlipFlopD:P2
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram8|Register16:P0|Register8:P1|BinaryDigit:P3
clock => FlipFlopD:P2.clock
input => Mux2Way:P1.b
load => Mux2Way:P1.sel
output <= FlipFlopD:P2.q


|Ram8|Register16:P0|Register8:P1|BinaryDigit:P3|Mux2Way:P1
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram8|Register16:P0|Register8:P1|BinaryDigit:P3|FlipFlopD:P2
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram8|Register16:P0|Register8:P1|BinaryDigit:P4
clock => FlipFlopD:P2.clock
input => Mux2Way:P1.b
load => Mux2Way:P1.sel
output <= FlipFlopD:P2.q


|Ram8|Register16:P0|Register8:P1|BinaryDigit:P4|Mux2Way:P1
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram8|Register16:P0|Register8:P1|BinaryDigit:P4|FlipFlopD:P2
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram8|Register16:P0|Register8:P1|BinaryDigit:P5
clock => FlipFlopD:P2.clock
input => Mux2Way:P1.b
load => Mux2Way:P1.sel
output <= FlipFlopD:P2.q


|Ram8|Register16:P0|Register8:P1|BinaryDigit:P5|Mux2Way:P1
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram8|Register16:P0|Register8:P1|BinaryDigit:P5|FlipFlopD:P2
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram8|Register16:P0|Register8:P1|BinaryDigit:P6
clock => FlipFlopD:P2.clock
input => Mux2Way:P1.b
load => Mux2Way:P1.sel
output <= FlipFlopD:P2.q


|Ram8|Register16:P0|Register8:P1|BinaryDigit:P6|Mux2Way:P1
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram8|Register16:P0|Register8:P1|BinaryDigit:P6|FlipFlopD:P2
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram8|Register16:P0|Register8:P1|BinaryDigit:P7
clock => FlipFlopD:P2.clock
input => Mux2Way:P1.b
load => Mux2Way:P1.sel
output <= FlipFlopD:P2.q


|Ram8|Register16:P0|Register8:P1|BinaryDigit:P7|Mux2Way:P1
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram8|Register16:P0|Register8:P1|BinaryDigit:P7|FlipFlopD:P2
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


